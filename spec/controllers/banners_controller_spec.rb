require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe BannersController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Banner. As you add validations to Banner, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    FactoryGirl.attributes_for(:valid_banner)
  }

  let(:banner) {
    FactoryGirl.create(:valid_banner)
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # BannersController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all banners as @banners" do
      get :index, {}, valid_session
      expect(assigns(:banners)).to eq([banner])
    end
  end

  describe "GET #show" do
    it "assigns the requested banner as @banner" do
      get :show, {:id => banner.to_param}, valid_session
      expect(assigns(:banner)).to eq(banner)
    end
  end

  describe "GET #new" do
    it "assigns a new banner as @banner" do
      get :new, {}, valid_session
      expect(assigns(:banner)).to be_a_new(Banner)
    end
  end

  describe "GET #edit" do
    it "assigns the requested banner as @banner" do
      get :edit, {:id => banner.to_param}, valid_session
      expect(assigns(:banner)).to eq(banner)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Banner" do
        expect {
          post :create, {:banner => valid_attributes}, valid_session
        }.to change(Banner, :count).by(1)
      end

      it "assigns a newly created banner as @banner" do
        post :create, {:banner => valid_attributes}, valid_session
        expect(assigns(:banner)).to be_a(Banner)
        expect(assigns(:banner)).to be_persisted
      end

      it "redirects to the created banner" do
        post :create, {:banner => valid_attributes}, valid_session
        expect(response).to redirect_to(Banner.last)
      end
    end

   
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        FactoryGirl.attributes_for(:valid_banner)
      }


      it "assigns the requested banner as @banner" do
        put :update, {:id => banner.to_param, :banner => valid_attributes}, valid_session
        expect(assigns(:banner)).to eq(banner)
      end

      it "redirects to the banner" do
        put :update, {:id => banner.to_param, :banner => valid_attributes}, valid_session
        expect(response).to redirect_to(banner)
      end
    end

  end

  describe "DELETE #destroy" do
    # it "destroys the requested banner" do
    #   expect {
    #     delete :destroy, {:id => banner.to_param}, valid_session
    #   }.to change(Banner, :count).by(-1)
    # end

    # it "redirects to the banners list" do
    #   delete :destroy, {:id => banner.to_param}, valid_session
    #   expect(response).to redirect_to(banners_url)
    # end
  end

end
